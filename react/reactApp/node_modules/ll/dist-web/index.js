function $(selectors, parent = document) {
    return parent.querySelector(selectors);
}

function $$(selectors, parent = document) {
    return Array
        .from(parent.querySelectorAll(selectors))
        .filter(element => element !== null);
}

function ensureArray(maybe) {
    return Array.isArray(maybe) ? maybe : [maybe];
}
function on(elements, events, targetFilter) {
    const elementsArray = ensureArray(elements)
        .filter((element) => element !== null && typeof element !== 'undefined')
        // Ensure events can be attached to the elements
        .filter(element => 'addEventListener' in element);
    const eventsArray = ensureArray(events);
    return (listeners, options) => {
        let listenersArray = ensureArray(listeners);
        if (typeof targetFilter !== 'undefined') {
            listenersArray = listenersArray.map((f) => function (event) {
                const target = event.target;
                if (target instanceof Element) {
                    const filteredTarget = target.closest(targetFilter);
                    if (filteredTarget)
                        f.call(filteredTarget, event);
                }
            });
        }
        for (let element of elementsArray) {
            for (let event of eventsArray) {
                for (let listener of listenersArray) {
                    element.addEventListener.call(element, event, listener, options);
                }
            }
        }
    };
}

function htmlEncode(value) {
    const div = document.createElement('div');
    const text = document.createTextNode(value);
    div.appendChild(text);
    return div.innerHTML;
}

/**
 * Simple string injection using tagged template literals.
 *
 * Indices can be in any order, repeated, or omitted.
 *
 * Undefined indices output a blank string.
 *
 * @param strings Array of template strings
 * @param indices The indices used in the template
 *
 * @example let template = sprintf`How many ${1} do I have? I have ${0}.`;
 * template( '10', 'dinosaurs' ); // How many dinosaurs do I have? I have 10.
 * template( 'zero', 'cars' ); // How many cars do I have? I have zero.
 */
function sprintf(strings, ...indices) {
    return (...values) => strings.reduce((total, part, index) => total + part + (values[indices[index]] || ''), '');
}

export { $, $$, htmlEncode, on, sprintf };
//# sourceMappingURL=index.js.map
